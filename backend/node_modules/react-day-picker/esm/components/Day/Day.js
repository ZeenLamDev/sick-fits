var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { isSameMonth } from 'date-fns';
import { Button } from '..';
import { useDayPicker, useSelectMultiple, useSelectRange, useSelectSingle } from '../../contexts';
import { useModifiers } from '../../hooks';
import { isDayPickerMultiple, isDayPickerRange, isDayPickerSingle } from '../../types';
import { useDayFocus } from './hooks/useDayFocus';
/**
 * The content of a day cell â€“ as a button or span element according to its
 * modifiers.
 */
export function Day(props) {
    var buttonRef = React.useRef(null);
    var date = props.date, displayMonth = props.displayMonth;
    var context = useDayPicker();
    var single = useSelectSingle();
    var multiple = useSelectMultiple();
    var range = useSelectRange();
    var _a = useDayFocus(date, buttonRef), focus = _a.focus, blur = _a.blur, focusOnKeyDown = _a.focusOnKeyDown, isFocused = _a.isFocused;
    var _b = useModifiers(date), modifiers = _b.modifiers, modifierClassNames = _b.modifierClassNames, modifierStyle = _b.modifierStyle;
    if (modifiers.hidden)
        return React.createElement(React.Fragment, null);
    var DayContent = context.components.DayContent, showOutsideDays = context.showOutsideDays;
    // #region Event handlers
    var handleClick = function (e) {
        var _a, _b, _c, _d;
        if (isDayPickerSingle(context)) {
            (_a = single.handleDayClick) === null || _a === void 0 ? void 0 : _a.call(single, date, modifiers, e);
        }
        else if (isDayPickerMultiple(context)) {
            (_b = multiple.handleDayClick) === null || _b === void 0 ? void 0 : _b.call(multiple, date, modifiers, e);
        }
        else if (isDayPickerRange(context)) {
            (_c = range.handleDayClick) === null || _c === void 0 ? void 0 : _c.call(range, date, modifiers, e);
        }
        (_d = context.onDayClick) === null || _d === void 0 ? void 0 : _d.call(context, date, modifiers, e);
    };
    var handleFocus = function (e) {
        var _a;
        focus(date);
        (_a = context.onDayFocus) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    var handleBlur = function (e) {
        var _a;
        blur();
        (_a = context.onDayBlur) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    var handleKeyDown = function (e) {
        var _a;
        focusOnKeyDown(e);
        (_a = context.onDayKeyDown) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    var handleKeyUp = function (e) {
        var _a;
        (_a = context.onDayKeyUp) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    var handleMouseEnter = function (e) {
        var _a;
        (_a = context.onDayMouseEnter) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    var handleMouseLeave = function (e) {
        var _a;
        (_a = context.onDayMouseLeave) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    var handleTouchCancel = function (e) {
        var _a;
        (_a = context.onDayTouchCancel) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    var handleTouchEnd = function (e) {
        var _a;
        (_a = context.onDayTouchEnd) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    var handleTouchMove = function (e) {
        var _a;
        (_a = context.onDayTouchMove) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    var handleTouchStart = function (e) {
        var _a;
        (_a = context.onDayTouchStart) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    // #endregion
    var isOutside = !isSameMonth(date, displayMonth);
    if (isOutside && !showOutsideDays)
        return React.createElement(React.Fragment, null);
    var classNames = [context.classNames.day].concat(modifierClassNames);
    var style = __assign(__assign({}, context.styles.day), modifierStyle);
    if (isOutside) {
        classNames.push(context.classNames.day_outside);
        style = __assign(__assign({}, context.styles), context.styles.day_outside);
    }
    var dayContent = (React.createElement(DayContent, { date: date, displayMonth: displayMonth, modifiers: modifiers }));
    var className = classNames.join(' ');
    var isControlled = isDayPickerSingle(context) ||
        isDayPickerMultiple(context) ||
        isDayPickerRange(context);
    if (!isControlled && !context.onDayClick) {
        return (React.createElement("div", { style: style, className: className }, dayContent));
    }
    var selected = modifiers.selected, disabled = modifiers.disabled;
    var tabIndex = disabled || isFocused ? -1 : 0;
    return (React.createElement(Button, { ref: buttonRef, "aria-pressed": selected, style: style, disabled: disabled, className: className, tabIndex: tabIndex, onClick: handleClick, onFocus: handleFocus, onBlur: handleBlur, onKeyDown: handleKeyDown, onKeyUp: handleKeyUp, onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave, onTouchCancel: handleTouchCancel, onTouchEnd: handleTouchEnd, onTouchMove: handleTouchMove, onTouchStart: handleTouchStart }, dayContent));
}
//# sourceMappingURL=Day.js.map