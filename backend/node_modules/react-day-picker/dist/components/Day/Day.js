"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Day = void 0;
var React = __importStar(require("react"));
var date_fns_1 = require("date-fns");
var components_1 = require("..");
var contexts_1 = require("../../contexts");
var hooks_1 = require("../../hooks");
var types_1 = require("../../types");
var useDayFocus_1 = require("./hooks/useDayFocus");
/**
 * The content of a day cell â€“ as a button or span element according to its
 * modifiers.
 */
function Day(props) {
    var buttonRef = React.useRef(null);
    var date = props.date, displayMonth = props.displayMonth;
    var context = contexts_1.useDayPicker();
    var single = contexts_1.useSelectSingle();
    var multiple = contexts_1.useSelectMultiple();
    var range = contexts_1.useSelectRange();
    var _a = useDayFocus_1.useDayFocus(date, buttonRef), focus = _a.focus, blur = _a.blur, focusOnKeyDown = _a.focusOnKeyDown, isFocused = _a.isFocused;
    var _b = hooks_1.useModifiers(date), modifiers = _b.modifiers, modifierClassNames = _b.modifierClassNames, modifierStyle = _b.modifierStyle;
    if (modifiers.hidden)
        return React.createElement(React.Fragment, null);
    var DayContent = context.components.DayContent, showOutsideDays = context.showOutsideDays;
    // #region Event handlers
    var handleClick = function (e) {
        var _a, _b, _c, _d;
        if (types_1.isDayPickerSingle(context)) {
            (_a = single.handleDayClick) === null || _a === void 0 ? void 0 : _a.call(single, date, modifiers, e);
        }
        else if (types_1.isDayPickerMultiple(context)) {
            (_b = multiple.handleDayClick) === null || _b === void 0 ? void 0 : _b.call(multiple, date, modifiers, e);
        }
        else if (types_1.isDayPickerRange(context)) {
            (_c = range.handleDayClick) === null || _c === void 0 ? void 0 : _c.call(range, date, modifiers, e);
        }
        (_d = context.onDayClick) === null || _d === void 0 ? void 0 : _d.call(context, date, modifiers, e);
    };
    var handleFocus = function (e) {
        var _a;
        focus(date);
        (_a = context.onDayFocus) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    var handleBlur = function (e) {
        var _a;
        blur();
        (_a = context.onDayBlur) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    var handleKeyDown = function (e) {
        var _a;
        focusOnKeyDown(e);
        (_a = context.onDayKeyDown) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    var handleKeyUp = function (e) {
        var _a;
        (_a = context.onDayKeyUp) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    var handleMouseEnter = function (e) {
        var _a;
        (_a = context.onDayMouseEnter) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    var handleMouseLeave = function (e) {
        var _a;
        (_a = context.onDayMouseLeave) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    var handleTouchCancel = function (e) {
        var _a;
        (_a = context.onDayTouchCancel) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    var handleTouchEnd = function (e) {
        var _a;
        (_a = context.onDayTouchEnd) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    var handleTouchMove = function (e) {
        var _a;
        (_a = context.onDayTouchMove) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    var handleTouchStart = function (e) {
        var _a;
        (_a = context.onDayTouchStart) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    // #endregion
    var isOutside = !date_fns_1.isSameMonth(date, displayMonth);
    if (isOutside && !showOutsideDays)
        return React.createElement(React.Fragment, null);
    var classNames = [context.classNames.day].concat(modifierClassNames);
    var style = __assign(__assign({}, context.styles.day), modifierStyle);
    if (isOutside) {
        classNames.push(context.classNames.day_outside);
        style = __assign(__assign({}, context.styles), context.styles.day_outside);
    }
    var dayContent = (React.createElement(DayContent, { date: date, displayMonth: displayMonth, modifiers: modifiers }));
    var className = classNames.join(' ');
    var isControlled = types_1.isDayPickerSingle(context) ||
        types_1.isDayPickerMultiple(context) ||
        types_1.isDayPickerRange(context);
    if (!isControlled && !context.onDayClick) {
        return (React.createElement("div", { style: style, className: className }, dayContent));
    }
    var selected = modifiers.selected, disabled = modifiers.disabled;
    var tabIndex = disabled || isFocused ? -1 : 0;
    return (React.createElement(components_1.Button, { ref: buttonRef, "aria-pressed": selected, style: style, disabled: disabled, className: className, tabIndex: tabIndex, onClick: handleClick, onFocus: handleFocus, onBlur: handleBlur, onKeyDown: handleKeyDown, onKeyUp: handleKeyUp, onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave, onTouchCancel: handleTouchCancel, onTouchEnd: handleTouchEnd, onTouchMove: handleTouchMove, onTouchStart: handleTouchStart }, dayContent));
}
exports.Day = Day;
//# sourceMappingURL=Day.js.map